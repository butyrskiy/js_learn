// ! ФУНКЦИЯ-КОНСТРУКТОР ЭТО ФУНКЦИЯ, КОТОРАЯ СЛУЖИТ «ШАБЛОНОМ» ДЛЯ ПОСТРОЕНИЯ ОБЪЕКТА

// Todo. СИНТАКСИС
// ? Принято, что имя функции-конструктора начинается с БОЛЬШОЙ буквы

// Todo. Функция становится функцией-констуктором когда она ВЫЗЫВАЕТСЯ С ОПЕРАТОРОМ «New»
// ? Внутри функции будет создан пустой объект
// ? К этому объекту будет привязана ссылка «this»
// ? Функция будет возвращать этот объект при вызове

function Product(brand, price, discount) {
  this.brand = brand; // ? будет добавлено свойство «brand: 'Apple'»
  // console.log(this); // ? «this» ведёт на скрытый объект внутри функции
  this.price = price;
  this.discount = discount;
  this.getPriceWithDiscount = function() {
    return this.price * (100 - this.discount) / 100;
  }
}

const apple = new Product('Apple', 100, 15);
console.log(apple);


// Todo. Создаём НОВЫЙ ОБЪЕКТ
const sumsung = new Product('Sumsung', 200, 25);
console.log(sumsung);

// ! ТО ЕСТЬ МЫ МОЖЕМ СОЗДАВАТЬ ПО ШАБЛОНУ ОБЪЕКТЫ СО НУЖНЫМИ НАМ СВОЙСТВАМИ И МЕТОДАМИ

apple.getPriceWithDiscount(); // 85
sumsung.getPriceWithDiscount(); // 150


// Todo. КЛАССОМ В Java Script называется функция-конструктор, которая может создавать некую нужную нам сущность в виде объекта, которую в свою очередь можно многократно копировать
// Todo. КЛАСС - это как некий собственный тип данных, который имеет свой набор свойств и методов для работы с ЭКЗЕМПЛЯРОМ этого класса, то есть пораждённым объектом от этого класса. Является шаблоном для какой-то сущности (продукт, пользователь, кусок интерфейса и т.д.)
// ? Переменные «apple» и «sumsung» выше - ЭКЗЕМПЛЯРЫ КЛАССА «Product»


// ! ОПЕРАТОР «instanceof»
// ? С его помощью можно проверить от какого КЛАССА был создан ЭКЗЕМПЛЯР
console.log(apple instanceof Product); // true
console.log(sumsung instanceof Product); // true


console.log([] instanceof Array); // true
// ? Array это тоже класс, который предоставяет набор методов и свойств для работы с массивами
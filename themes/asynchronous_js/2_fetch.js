// ! ФУНКЦИЯ «FETCH»
// ? По-умолчанию «fetch» делает GET запрос и возвращает ПРОМИС в котором мы получим объект ответа
// Todo. Первый аргумент - адрес запроса
// Todo. Второй аргумент - объект с настройками, если у нас не «GET»-запрос
// ? При другом запросе, например «POST», то мы можем вторым аргументом передать объект где указать метод запроса, «body», «headers» и т.д.

fetch('https://jsonplaceholder.typicode.com/posts')
  .then(response => {
    return response.json(); // ? Используем метод «JSON», так как с сервере мы получаем данные именно в этом формате
  })
  // .then(posts => console.log(posts)) // ? Получаем посты уже в формате массива с объектами
  .catch(err => console.log('error'));


// Todo. Таким образом в первом «then» мы получаем объект ответа от сервера в котором будет набор свойств и методов для работы с ответом.
// ? Мы можем проверить статус, получить заголовки и для того чтобы ПОЛУЧИТЬ ТЕЛО ЗАПРОСА мы должны вызвать у этого объекта (в нашем случае «responce») один из методов, который преобразует ответ от сервера в нужный нам формат
// * Если получаем JSON - используем метод «json()»
// * Если текст - используем «text()» и т.д.

// Todo. На следующей цепочке(в следующем «then») получаем ТЕЛО ответа от сервера


// ! Заворачиваем всё выше в функцию, так как чаще всего этот метод содерится внутри функции

function getPost(id) {
  return new Promise((resolve, reject) => {
    fetch(`https://jsonplaceholder.typicode.com/posts/${id}`)
      .then(response => response.json())
      .then(post => resolve(post))
      .catch(err => reject(err));
  })
}
getPost(1).then(post => console.log(post));